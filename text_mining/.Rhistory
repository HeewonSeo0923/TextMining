sentences_moon
str_detect('치킨은 맛있다', '치킨킨')
str_detect('치킨은 맛있다', '치킨')
str_detect('치킨은 맛있다', '피자자')
str_detect('치킨은 맛있다', '피자')
sentences_moon %>%
filter(str_detect(sentence, '국민민'))
sentences_moon %>%
filter(str_detect(sentence, '국민'))
sentences_moon %>%
filter(str_detect(sentence, '일자리리'))
sentences_moon %>%
filter(str_detect(sentence, '일자리'))
word_noun <- moon %>%
unnest_tokens(input = value,
output =  word,
token = extractNoun())
word_noun <- moon %>%
unnest_tokens(input = value,
output =  word,
token = extractNoun)
# 문장 기준 토큰화
sentences_moon <- raw_moon %>%
unnest_tokens(input = value,
output =sentences,
token = 'sentences')
# 문장 기준 토큰화
sentences_moon <- raw_moon %>%
unnest_tokens(input = value,
output =sentences,
token = 'sentences')
# 문장 기준 토큰화
sentences_moon <- raw_moon %>%
unnest_tokens(input = value,
output =sentence,
token = 'sentences')
# 문장 기준 토큰화
sentences_moon <- raw_moon %>%
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
sentences_moon %>%
filter(str_detect(sentence, '일자리'))
# q1
raw_park <- readLines('speech_park.csv', encoding = 'UTF-8')
head(raw_park)
park <- raw_park %>%
str_replace_all('[^가-힣]', ' ') %>% # 한글만 남기기
str_squish() %>% # 연속된 공백 제거
as_tibble() # tibble로 변환
word_noun <- park %>%
unnest_tokens(input = value,
output = word,
token = extractNoun)
word_noun
word_noun <- word_noun %>%
count(word, sort =T) %>%
filter(str_count(word) > 1)
word_noun
top20 <- word_noun %>%
head(20)
library(ggplot2)
ggplot(top20, aes(x = reorder(word,n), y = n)) +
geom_col() +
coord_flip() +
geom_text(aes(label = n), hjust = -0.3) +
labs(x = NULL) +
theme(text = element_text(family = 'nanumgothic'))
sentences_park  <- raw_park %>%
unnest_tokens(input = value,
output = word,
token = 'sentences')
sentences_park  <- raw_park %>%
unnest_tokens(input = value,
output = word,
token = 'sentences')
sentences_park  <- raw_park %>%
unnest_tokens(input = value,
output = sentences,
token = extractNoun)
sentences_park  <- raw_park %>%
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
sentences_park  <- raw_park %>%
as_tibble()
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
sentences_park  <- raw_park %>%
as_tibble() %>%
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
sentences_park
sentence_park %>%
filter(str_detect(sentence, '경제제'))
sentence_park %>%
filter(str_detect(sentence, '경제'))
sentence_park %>%
filter(str_detect(sentence, '경제'))
sentences_park  <- raw_park %>%
as_tibble() %>%
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
sentences_park
sentence_park %>%
filter(str_detect(sentence, '경제'))
sentenceㄴㄴ_park %>%
filter(str_detect(sentence, '경제'))
sentences_park %>%
filter(str_detect(sentence, '경제'))
sentences_park %>%
filter(str_detect(sentence, '경제'))
library(dplyr)
raw_moon <- readLines('speech_moon.csv', encoding = 'UTF-8')
moon <- raw_moon %>%
as_tibble()%>%
mutate(president = moon)
moon <- raw_moon %>%
as_tibble()%>%
mutate(president = moon)
moon <- raw_moon %>%
as_tibble()%>%
mutate(president = 'moon')
raw_park <- readLines('speech_park.csv', encoding = 'UTF-8')
park <- raw_park %>%
as_tibble() %>%
mutate(president = 'park')
bind_speeches <- bind_rows(moon, park) %>%
select(speech, value)
bind_speeches <- bind_rows(moon, park) %>%
select(president, value)
head(bind_speeches)
tail(bind_speeches)
library(stringr)
library(dplyr)
speeches <- bind_speeches %>%
mutate(value = str_replace_all(value, '[^가-힣]', ' '),
value = str_squish(value))
speeches
library(tidytext)
library(KoNLP)
speeches <- speeches %>%
unnest_tokens(input = value,
output = word,
token = extractNoun())
speeches <- speeches %>%
unnest_tokens(input = value,
output = word,
token = extractNoun)
speeches
df <- tibble(class = c('a', 'a', 'a', 'b','b','b'),
sex = c('female', 'male','female', 'male', 'male''female'))
df <- tibble(class = c('a', 'a', 'a', 'b','b','b'),
sex = c('female', 'male','female', 'male', 'male','female'))
df
df %>% count(class, sex)
frequency <- speeches %>%
count(president, word) %>%
filter(str_count(word) > 1)
head(frequency)
df <- tibble(x = c(1:100))
df
df %>% slice_max(x, n = 3)
top10 <- frequency %>%
group_by(president) %>%
slice_max(n, n-10)
top10 <- frequency %>%
group_by(president) %>%
slice_max(n, n =10)
top10
top10 %>%
filter(president == 'park')
df <- tibble(x = c('A', 'B', 'C', 'D'), y = c(4,3,2,2))
df %>% slice_max(y, n=3)
df %>% slice_max(y, n=3, with_ties = F)
top10 <- frequency %>%
group_by(president) %>%
slice_max(n, n = 10, with_ties = F)
top10
library(ggo)
library(ggplot2)
ggplot(top10, aes(x = reorder(word, n),
y = n,
fill = president)) +
geom_col()+
coord_flip()+
facet_wrap(~ president)
ggplot(top10, aes(x = reorder(word, n),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y')
top10 <- frequency %>%
filter(word != '국민') %>%
group_by(president) %>%
slice_max(n, n = 10, with_ties = F)
top10
ggplot(top10, aes(x = reorder(word, n),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y')
ggplot(top10, aes(x = reorder_within(word, n, president),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y')
ggplot(top10, aes(x = reorder_within(word, n, president),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y') +
labs(x = NULL) +
theme(text = element_text(family = 'nanumgothic'))
ggplot(top10, aes(x = reorder_within(word, n, president),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y') +
scale_x_reordered() +
labs(x = NULL) +
theme(text = element_text(family = 'nanumgothic'))
df_long <- frequency %>%
group_by(president) %>%
slice_max(n, n = 10) %>%
filter(word %in% c('국민', '우리', '정치', '행복복'))
df_long <- frequency %>%
group_by(president) %>%
slice_max(n, n = 10) %>%
filter(word %in% c('국민', '우리', '정치', '행복'))
df_long
install.packages('tidyr')
library(tidyr)
df_wide <- df_long %>%
pivot_wider(names_from = president,
values_from = n)
df_wide
df_wide <- df_long %>%
pivot_wider(names_from = president,
values_from = n,
values_fill = list(n = 0))
df_wide
frequency_wide <- frequency %>%
pivot_wider(names_from = president,
values_from = n,
values_fill = list(n = 0))
frequency_wide
frequency_wide <- frequency_wide %>%
mutate(ratio_moon = ((moon)/(sum(moon))),
ration_park = ((park)/(sum(park))))
frequency_wide <- frequency_wide %>%
mutate(ratio_moon = ((moon + 1)/ (sum(moon + 1))),
ratio_park = ((park + 1)/ (sum(park + 1))))
frequency_wide
frequency_wide <- frequency_wide %>%
mutate(ratio_moon = ((moon)/(sum(moon))), # moon에서 단어의 비중
ratio_park = ((park)/(sum(park)))) # park에서 단어의 비중
frequency_wide <- frequency_wide %>%
mutate(ratio_moon = ((moon + 1)/ (sum(moon + 1))),
ratio_park = ((park + 1)/ (sum(park + 1))))
frequency_wide
View(frequency_wide)
library(dplyr)
raw_moon <- readLines('speech_moon.csv', encoding = 'UTF-8')
moon <- raw_moon %>%
as_tibble()%>%
mutate(president = 'moon')
raw_park <- readLines('speech_park.csv', encoding = 'UTF-8')
park <- raw_park %>%
as_tibble() %>%
mutate(president = 'park')
bind_speeches <- bind_rows(moon, park) %>%
select(president, value)
head(bind_speeches)
tail(bind_speeches)
library(stringr)
speeches <- bind_speeches %>%
mutate(value = str_replace_all(value, '[^가-힣]', ' '),
value = str_squish(value))
speeches
library(tidytext)
library(KoNLP)
speeches <- speeches %>%
unnest_tokens(input = value,
output = word,
token = extractNoun)
speeches
df <- tibble(class = c('a', 'a', 'a', 'b','b','b'),
sex = c('female', 'male','female', 'male', 'male','female'))
df
df %>% count(class, sex)
frequency <- speeches %>%
count(president, word) %>% # 연설문 및 단어별 빈도
filter(str_count(word) > 1) # 두 글자 이상 추출
head(frequency)
df <- tibble(x = c(1:100))
df
df %>% slice_max(x, n = 3)
top10 <- frequency %>%
group_by(president) %>% # president 별로 분리
slice_max(n, n =10) # 상위 10개 추출
top10
top10 %>%
filter(president == 'park')
df <- tibble(x = c('A', 'B', 'C', 'D'), y = c(4,3,2,2))
df %>% slice_max(y, n=3)
df %>% slice_max(y, n=3, with_ties = F)
top10 <- frequency %>%
group_by(president) %>%
slice_max(n, n = 10, with_ties = F)
top10
library(ggplot2)
ggplot(top10, aes(x = reorder(word, n),
y = n,
fill = president)) +
geom_col()+
coord_flip()+
facet_wrap(~ president)
ggplot(top10, aes(x = reorder(word, n),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y')
top10 <- frequency %>%
filter(word != '국민') %>%
group_by(president) %>%
slice_max(n, n = 10, with_ties = F)
top10
ggplot(top10, aes(x = reorder(word, n),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y')
ggplot(top10, aes(x = reorder_within(word, n, president),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y')
ggplot(top10, aes(x = reorder_within(word, n, president),
y = n,
fill = president)) +
geom_col() +
coord_flip() +
facet_wrap(~ president,
scales = 'free_y') +
scale_x_reordered() +
labs(x = NULL) +
theme(text = element_text(family = 'nanumgothic'))
df_long <- frequency %>%
group_by(president) %>%
slice_max(n, n = 10) %>%
filter(word %in% c('국민', '우리', '정치', '행복'))
df_long
install.packages('tidyr')
library(tidyr)
df_wide <- df_long %>%
pivot_wider(names_from = president,
values_from = n)
df_wide
df_wide <- df_long %>%
pivot_wider(names_from = president,
values_from = n,
values_fill = list(n = 0))
df_wide
frequency_wide <- frequency %>%
pivot_wider(names_from = president,
values_from = n,
values_fill = list(n = 0))
frequency_wide
frequency_wide <- frequency_wide %>%
mutate(ratio_moon = ((moon)/(sum(moon))), # moon에서 단어의 비중
ratio_park = ((park)/(sum(park)))) # park에서 단어의 비중
frequency_wide <- frequency_wide %>%
mutate(ratio_moon = ((moon + 1)/ (sum(moon + 1))),
ratio_park = ((park + 1)/ (sum(park + 1))))
frequency_wide
frequency_wide <- frequency_wide %>%
mutate(odds_ratio = ratio_moon/ratio_park)
frequency_wide %>%
arrange(-odds_ratio)
frequency_wide %>%
arrange(odds_ratio)
frequency_wide <- frequency_wide %>%
mutate(ratio_moon = ((moon + 1)/ (sum(moon + 1))),
ratio_park = ((park + 1)/ (sum(park + 1))),
odds_ratio = ratio_moon/ratio_park)
((park + 1)/ (sum(park + 1)))
frequency_wide <- frequency_wide %>%
mutate(odds = ratio((moon + 1)/ (sum(moon + 1)))/
((park + 1)/ (sum(park + 1))))
frequency_wide <- frequency_wide %>%
mutate(odds = ratio((moon + 1)/ (sum(moon + 1)))/
((park + 1)/ (sum(park + 1))))
frequency_wide <- frequency_wide %>%
mutate(odds_ratio  = ((moon + 1)/ (sum(moon + 1)))/
((park + 1)/ (sum(park + 1))))
top10 <- frequency_wide %>%
filter(rank(odds_ratio) <= 10 \ rank(-odds_ratio) <= 10)
top10 <- frequency_wide %>%
filter(rank(odds_ratio) <= 10 | rank(-odds_ratio) <= 10)
top10 %>%
arrange(-odds_ratio)
top10 <- top10 %>%
mutate(president = ifelse(odds_ratio > 1, 'moon', 'park'),
n = ifelse(odds_ratio >1 , moon, park))
top10
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president))
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president)) +
geom_col() +
coord_filp() +
facet_wrap(~ president, scales = 'free_y') +
scale_x_reordered()
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president)) +
geom_col() +
coord_filp() +
facet_wrap(~ president, scales = 'free_y') +
scale_x_reordered()
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president)) +
geom_col() +
facet_wrap(~ president, scales = 'free_y') +
scale_x_reordered()
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president)) +
geom_col() +
coord_flip()
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president)) +
geom_col() +
coord_flip()+
facet_wrap(~ president, scales = 'free_y') +
scale_x_reordered()
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president)) +
geom_col() +
coord_flip()+
facet_wrap(~ president, scales = 'free') +
scale_x_reordered()+
labs = (x = NULL) +
theme(text = element_text(family = 'nanumgothic'))
ggplot(top10, aes(x = reorder_within(word, n , president),
y = n,
fill = president)) +
geom_col() +
coord_flip()+
facet_wrap(~ president, scales = 'free') +
scale_x_reordered()+
labs(x = NULL) +
theme(text = element_text(family = 'nanumgothic'))
speech_sentence <- bind_speeches %>%
as_tibble() %>%
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
head(speeches_sentence)
speechs_sentence <- bind_speeches %>%
as_tibble() %>%
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
head(speeches_sentence)
speeches_sentence <- bind_speeches %>%
as_tibble() %>%
unnest_tokens(input = value,
output = sentence,
token = 'sentences')
head(speeches_sentence)
tail(speech_sentence)
tail(speeches_sentence)
speeches_sentence
speeches_sentence %>%
filter(president == 'moon' & str_detect(sentence, '복지국가가'))
speeches_sentence %>%
filter(president == 'moon' & str_detect(sentence, '복지국가'))
speeches_sentence %>%
filter(president == 'park' & str_detect(sentence, '행복'))
frequency_wide %>%
arrange(abs(1 - odds_ratio)) %>%
head(10)
frequency_wide %>%
filter(moon >= 5 & park >= 5) %>%
arrange(abs(1 - odds_ratio)) %>%
head(10)
